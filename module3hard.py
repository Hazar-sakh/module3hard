# Задание "Раз, два, три, четыре, пять .... Это не всё?"

# Исходные данные
data_structure = [
    [1, 2, 3],
    {'a': 4, 'b': 5},
    (6, {'cube': 7, 'drum': 8}),
    "Hello",
    ((), [{(2, 'Urban', ('Urban2', 35))}])
]

# Функция
def calculate_structure_sum(*args):  # поскольку количество элементов может быть разным задаем параметр *args
    _summ = 0  # переменная для подсчета суммы цифр и кол-ва букв
    for i in args:  # перебираем элементы списка / элементы внутри списка в рекурсии каждой итерации
        if isinstance(i, (list, set, tuple)):  # если элемент(эл.внутри списка в рекурсии) является указ.типом
            for j in i:  # перебираем каждый его элемент (эл.внутри элемента в рекурсии)
                _summ += calculate_structure_sum(j)  # прибавляем к переменной значение элемента и выполняем
                # рекурсию, чтобы проверсти проверку элемента и, в случае если это указ.тип, раскрыть его и пересчитать
        elif isinstance(i, dict):  # если i словарь
            for key, value in i.items():  # перебираем ключи и значения
                _summ += calculate_structure_sum(key, value)  # прибавляем ключи (len(str)) и значения в перемен.
                # через рекурсию
        elif isinstance(i, str):  # если элемент внутри списка - str
            _summ += len(i)  # прибавляем количество букв в переменную
        elif isinstance(i, int):  # если элемент внутри списка - int
            _summ += i  # прибавляем его значение к переменной
    return _summ  # возвращаем итоговый результат подсчета элементов списка (элементов внутри элементов через рекурсию)


result = calculate_structure_sum(data_structure)
print(result)
